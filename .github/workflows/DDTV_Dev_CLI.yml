name: Dev

on:
  push:
     tags:
      - "dev*"
  pull_request:
    paths:
      - 'CLI/**'
      - '.github/workflows/DDTV_Dev_CLI.yml'
      - '!**/README.md'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x86
          - os: windows-latest
            runtime: win-x64
          - os: macOS-latest
            runtime: osx-x64
          - os: macOS-latest
            runtime: osx-arm64
          - os: ubuntu-latest
            runtime: linux-x64
          - os: ubuntu-latest
            runtime: linux-arm
          - os: ubuntu-latest
            runtime: linux-arm64
          - os: ubuntu-latest
            runtime: linux-musl-x64
          - os: ubuntu-latest
            runtime: linux-musl-arm
          - os: ubuntu-latest
            runtime: linux-musl-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use .NET 8.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Download and extract latest release (Linux or macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p static
          header="authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
          FILE_URL=$(curl -sH "$header" "https://api.github.com/repos/moehuhu/DDTV_GUI_React/releases/latest" \
              | grep "browser_download_url.*ddtv-gui-react_v.*\.zip" \
              | cut -d : -f 2,3 \
              | tr -d \")
          wget --header="$header" $FILE_URL -O ddtv-gui-react.zip
          unzip ddtv-gui-react.zip -d static
          rm ddtv-gui-react.zip
        shell: bash

      - name: Download and extract latest release (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir static
          $header = @{
              Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"
          }
          $url = Invoke-RestMethod -Uri https://api.github.com/repos/moehuhu/DDTV_GUI_React/releases/latest -Headers $header
          $fileUrl = $url.assets | Where-Object { $_.name -match "ddtv-gui-react_v.*\.zip" } | Select-Object -ExpandProperty browser_download_url
          Invoke-WebRequest -Uri $fileUrl -OutFile ddtv-gui-react.zip -Headers $header
          Expand-Archive -Path ddtv-gui-react.zip -DestinationPath static
          Remove-Item -Path ddtv-gui-react.zip
        shell: powershell

      - name: Build
        run: cd CLI && dotnet publish --runtime ${{ matrix.runtime }} --configuration Release --self-contained true --output build_output

      - name: Copy static folder to build_output
        run: cp -r static CLI/build_output/static

      - name: Copy ffmpeg.exe (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir CLI\\build_output\\plugins\\ffmpeg
          copy CLI\\plugins\\ffmpeg\\ffmpeg.exe CLI\\build_output\\plugins\\ffmpeg\\ffmpeg.exe

      - name: Move all files to bin folder and create shortcut
        run: |
          mkdir CLI/build_output/bin
          find CLI/build_output -mindepth 1 -maxdepth 1 ! -name bin -exec mv {} CLI/build_output/bin \;
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "Creating shortcut for CLI.exe"
            powershell -Command '$WshShell = New-Object -comObject WScript.Shell;$Shortcut = $WshShell.CreateShortcut("CLI\\build_output\\CLI.lnk");$Shortcut.TargetPath = "CLI\\build_output\\bin\\CLI.exe";$Shortcut.Save()'
          else
            echo "Creating symbolic link for CLI"
            ln -s bin/CLI CLI/build_output/CLI
          fi  
        shell: bash

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: DDTV-CLI-${{ matrix.os }}-${{ matrix.runtime }}
          path: CLI/build_output

      - name: Docker Release
        uses: moomiji/docker-ddtv@v5
        if: ${{ contains(matrix.runtime, 'linux') }}
        with:
          push:       ${{ github.ref_type == 'tag' }}
          repo:       ddtv/cli
          path:       ${{ github.workspace }}/CLI/build_output
          version:    ${{ github.ref_name }}
          runtime:    ${{ matrix.runtime }}
          image_id:   ${{ contains(matrix.runtime, 'musl') && 'alpine' || 'debian' }}
          build-args: REPO=mcr.microsoft.com/dotnet/runtime-deps:${{ contains(matrix.runtime, 'musl') && '8.0-alpine' || '8.0' }}
